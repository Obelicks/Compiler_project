Parsing...
Parsed
do:function factorial (typeK int n 
int ):
do:if( id n == 0 || id n == 1 )
then( return( 1 ) 
)
else( return( ( id n * factorial ( id n - 1 ) ) ) 
)
end. factorial
write( factorial 5 ) 
Typechecking...
typecheked
Generating code...
Generating prologue...
ending prologue
writing main...
generating generate_FUNC -> bodyK
enter generate_LIST with variable 3
generating generate_LIST -> decK
enter generate_DEC with declaration of 2 
generating generate_DEC -> decfuncK
generating generate_FUNC -> functionK
generating generate_FUNC -> headK
enter generate_LIST with variable 0
enter generate_LIST with variable 2
generating generate_LIST -> varK
EMIL 110
n
generating generate_FUNC -> bodyK
enter generate_LIST with variable 4
generating generate_LIST -> stateK
generating generate_STM 
generating generate_STM -> ifelseK 
generating generate_EXP
generating generate_EXP -> orK
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> expK 
generating generate_EXP
generating generate_EXP -> equaltoK
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> variableK 
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> numK 
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> expK 
generating generate_EXP
generating generate_EXP -> equaltoK
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> variableK 
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> numK 
generating generate_STM 
generating generate_STM -> returnK 
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> numK 
generating generate_STM 
generating generate_STM -> returnK 
generating generate_EXP
generating generate_EXP -> timesK
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> variableK 
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> actlistK 
enter generate_LIST with variable 6
generating generate_LIST -> actlistK
enter generate_LIST with variable 7
generating generate_LIST -> expressionK
generating generate_EXP
generating generate_EXP -> minusK
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> variableK 
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> numK 
generating generate_FUNC -> tailK
end of function factorialenter generate_LIST with variable 4
generating generate_LIST -> stateK
generating generate_STM 
generating generate_STM -> writeK 
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> actlistK 
enter generate_LIST with variable 6
generating generate_LIST -> actlistK
enter generate_LIST with variable 7
generating generate_LIST -> expressionK
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> numK 
ending code/starting epilogue...
code written
