Parsing...
Parsed
do:function myFunc (typeK int a44 
typeK int b44 
typeK int c44 
int ):
do:prettySTM case stmlistK
end. myFunc
write( myFunc 4 2 4 ) 
Typechecking...
typecheked
Generating code...
Generating prologue...
ending prologue
writing main...
generating generate_FUNC -> bodyK
enter generate_LIST with variable 3
generating generate_LIST -> decK
enter generate_DEC with declaration of 2 
generating generate_DEC -> decfuncK
generating generate_FUNC -> functionK
generating generate_FUNC -> headK
enter generate_LIST with variable 0
enter generate_LIST with variable 1
generating generate_LIST -> var_list
generating generate_TYPE
generating generate_TYPE -> var_typeK
EMIL2 a44 
generating generate_TYPE
generating generate_TYPE -> intconstK
enter generate_LIST with variable 1
generating generate_LIST -> var_list
generating generate_TYPE
generating generate_TYPE -> var_typeK
EMIL2 b44 
generating generate_TYPE
generating generate_TYPE -> intconstK
enter generate_LIST with variable 2
generating generate_LIST -> varK
c44
generating generate_FUNC -> bodyK
enter generate_LIST with variable 4
generating generate_LIST -> stateK
generating generate_STM 8 
generating generate_STM -> stmlistK 
enter generate_LIST with variable 4
generating generate_LIST -> stateK
generating generate_STM 0 
generating generate_STM -> returnK 
generating generate_EXP
generating generate_EXP -> plusK
generating generate_EXP
generating generate_EXP -> plusK
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> variableK 
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> variableK 
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> variableK 
generating generate_FUNC -> tailK
end of function myFuncenter generate_LIST with variable 4
generating generate_LIST -> stateK
generating generate_STM 1 
generating generate_STM -> writeK 
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> actlistK 
enter generate_LIST with variable 6
generating generate_LIST -> actlistK
enter generate_LIST with variable 8
generating generate_LIST -> explistK
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> numK 
enter generate_LIST with variable 8
generating generate_LIST -> explistK
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> numK 
enter generate_LIST with variable 7
generating generate_LIST -> expressionK
generating generate_EXP
generating generate_EXP -> termK
generating generate_TERM 
generating generate_TERM -> numK 
ending code/starting epilogue...
code written
